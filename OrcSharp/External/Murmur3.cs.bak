/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.apache.hadoop.hive.ql.io.orc
{
    using System;

    /**
     * Murmur3 is successor to Murmur2 fast non-crytographic hash algorithms.
     *
     * This is a public domain code with no copyrights.
     * From homepage of MurmurHash (https://code.google.com/p/smhasher/),
     * "All MurmurHash versions are public domain software, and the author disclaims all copyright
     * to their code."
     */

    public static class Murmur3
    {
        // from 64-bit linear congruential generator
        public const ulong NULL_HASHCODE = 2862933555777941757UL;

        private const int DEFAULT_SEED = 104729;

        static uint rotl32(uint x, sbyte r)
        {
            return (x << r) | (x >> (32 - r));
        }

        static ulong rotl64(ulong x, sbyte r)
        {
            return (x << r) | (x >> (64 - r));
        }

        //----------------------------------------------------------------------------- 
        // Finalization mix - force all bits of a hash block to avalanche

        static uint fmix32(uint h)
        {
            h ^= h >> 16;
            h *= 0x85ebca6b;
            h ^= h >> 13;
            h *= 0xc2b2ae35;
            h ^= h >> 16;

            return h;
        }

        static ulong fmix64(ulong k)
        {
            k ^= k >> 33;
            k *= 0xff51afd7ed558ccdul;
            k ^= k >> 33;
            k *= 0xc4ceb9fe1a85ec53ul;
            k ^= k >> 33;

            return k;
        }

        unsafe public static uint MurmurHash3_x86_32(byte[] rawData, int offset, int len, uint seed)
        {
            if (offset + len > rawData.Length)
            {
                throw new ArgumentOutOfRangeException("len");
            }

            int nblocks = len / 4;

            uint h1 = seed;

            const uint c1 = 0xcc9e2d51;
            const uint c2 = 0x1b873593;
            uint k1;

            //----------
            // body

            fixed (byte* rawDataStart = rawData)
            {
                byte* data = rawDataStart + offset;

                uint* blocks = (uint*)(data + nblocks * 4);
                for (int i = -nblocks; i != 0; i++)
                {
                    k1 = blocks[i];

                    k1 *= c1;
                    k1 = rotl32(k1, 15);
                    k1 *= c2;

                    h1 ^= k1;
                    h1 = rotl32(h1, 13);
                    h1 = h1 * 5 + 0xe6546b64;
                }

                //----------
                // tail

                byte* tail = (byte*)(data + nblocks * 4);

                k1 = 0;

                switch (len & 3)
                {
                    case 3:
                        k1 ^= (uint)(tail[2]) << 16;
                        goto case 2;
                    case 2:
                        k1 ^= (uint)(tail[1]) << 8;
                        goto case 1;
                    case 1:
                        k1 ^= tail[0];
                        k1 *= c1; k1 = rotl32(k1, 15); k1 *= c2; h1 ^= k1;
                        break;
                }
            }

            //----------
            // finalization

            h1 ^= (uint)len;

            h1 = fmix32(h1);

            return h1;
        }

        public static unsafe ulong MurmurHash3_x86_128(byte[] rawData, int offset, int len, uint seed, out ulong msb)
        {
            if (offset + len > rawData.Length)
            {
                throw new ArgumentOutOfRangeException("len");
            }

            int nblocks = len / 16;

            uint h1 = seed;
            uint h2 = seed;
            uint h3 = seed;
            uint h4 = seed;

            const uint c1 = 0x239b961b;
            const uint c2 = 0xab0e9789;
            const uint c3 = 0x38b34ae5;
            const uint c4 = 0xa1e38b93;

            fixed (byte* rawDataStart = rawData)
            {
                //----------
                // body

                byte* data = rawDataStart + offset;

                uint* blocks = (uint*)(data + nblocks * 16);
                uint k1;
                uint k2;
                uint k3;
                uint k4;

                for (int i = -nblocks; i != 0; i++)
                {
                    k1 = blocks[i * 4 + 0];
                    k2 = blocks[i * 4 + 1];
                    k3 = blocks[i * 4 + 2];
                    k4 = blocks[i * 4 + 3];

                    k1 *= c1; k1 = rotl32(k1, 15); k1 *= c2; h1 ^= k1;

                    h1 = rotl32(h1, 19); h1 += h2; h1 = h1 * 5 + 0x561ccd1b;

                    k2 *= c2; k2 = rotl32(k2, 16); k2 *= c3; h2 ^= k2;

                    h2 = rotl32(h2, 17); h2 += h3; h2 = h2 * 5 + 0x0bcaa747;

                    k3 *= c3; k3 = rotl32(k3, 17); k3 *= c4; h3 ^= k3;

                    h3 = rotl32(h3, 15); h3 += h4; h3 = h3 * 5 + 0x96cd1c35;

                    k4 *= c4; k4 = rotl32(k4, 18); k4 *= c1; h4 ^= k4;

                    h4 = rotl32(h4, 13); h4 += h1; h4 = h4 * 5 + 0x32ac3b17;
                }

                //----------
                // tail

                byte* tail = (byte*)(data + nblocks * 16);

                k1 = 0;
                k2 = 0;
                k3 = 0;
                k4 = 0;

                switch (len & 15)
                {
                    case 15:
                        k4 ^= (uint)(tail[14]) << 16;
                        goto case 14;
                    case 14:
                        k4 ^= (uint)(tail[13]) << 8;
                        goto case 13;
                    case 13:
                        k4 ^= (uint)(tail[12]) << 0;
                        k4 *= c4; k4 = rotl32(k4, 18); k4 *= c1; h4 ^= k4;
                        goto case 12;
                    case 12:
                        k3 ^= (uint)(tail[11]) << 24;
                        goto case 11;
                    case 11:
                        k3 ^= (uint)(tail[10]) << 16;
                        goto case 10;
                    case 10:
                        k3 ^= (uint)(tail[9]) << 8;
                        goto case 9;
                    case 9:
                        k3 ^= (uint)(tail[8]) << 0;
                        k3 *= c3; k3 = rotl32(k3, 17); k3 *= c4; h3 ^= k3;
                        goto case 8;
                    case 8:
                        k2 ^= (uint)(tail[7]) << 24;
                        goto case 7;
                    case 7:
                        k2 ^= (uint)(tail[6]) << 16;
                        goto case 6;
                    case 6:
                        k2 ^= (uint)(tail[5]) << 8;
                        goto case 5;
                    case 5:
                        k2 ^= (uint)(tail[4]) << 0;
                        k2 *= c2; k2 = rotl32(k2, 16); k2 *= c3; h2 ^= k2;
                        goto case 4;
                    case 4:
                        k1 ^= (uint)(tail[3]) << 24;
                        goto case 3;
                    case 3:
                        k1 ^= (uint)(tail[2]) << 16;
                        goto case 2;
                    case 2:
                        k1 ^= (uint)(tail[1]) << 8;
                        goto case 1;
                    case 1:
                        k1 ^= (uint)(tail[0]) << 0;
                        k1 *= c1; k1 = rotl32(k1, 15); k1 *= c2; h1 ^= k1;
                        break;
                };

                //----------
                // finalization

                h1 ^= (uint)len; h2 ^= (uint)len; h3 ^= (uint)len; h4 ^= (uint)len;

                h1 += h2; h1 += h3; h1 += h4;
                h2 += h1; h3 += h1; h4 += h1;

                h1 = fmix32(h1);
                h2 = fmix32(h2);
                h3 = fmix32(h3);
                h4 = fmix32(h4);

                h1 += h2; h1 += h3; h1 += h4;
                h2 += h1; h3 += h1; h4 += h1;
            }

            msb = (h4 << 32) | h3;
            return (h2 << 32) | h1;
        }

        public static unsafe ulong MurmurHash3_x64_128(byte[] rawData, int offset, int len, uint seed, out ulong msb)
        {
            if (offset + len > rawData.Length)
            {
                throw new ArgumentOutOfRangeException("len");
            }

            int nblocks = len / 16;

            ulong h1 = seed;
            ulong h2 = seed;

            const ulong c1 = 0x87c37b91114253d5ul;
            const ulong c2 = 0x4cf5ad432745937ful;

            //----------
            // body

            fixed (byte* rawDataStart = rawData)
            {
                byte* data = rawDataStart + offset;
                ulong* blocks = (ulong*)data;
                ulong k1 = 0;
                ulong k2 = 0;

                for (int i = 0; i < nblocks; i++)
                {
                    k1 = blocks[i * 2 + 0];
                    k2 = blocks[i * 2 + 1];

                    k1 *= c1; k1 = rotl64(k1, 31); k1 *= c2; h1 ^= k1;

                    h1 = rotl64(h1, 27); h1 += h2; h1 = h1 * 5 + 0x52dce729;

                    k2 *= c2; k2 = rotl64(k2, 33); k2 *= c1; h2 ^= k2;

                    h2 = rotl64(h2, 31); h2 += h1; h2 = h2 * 5 + 0x38495ab5;
                }

                //----------
                // tail

                byte* tail = (byte*)(data + nblocks * 16);

                k1 = 0;
                k2 = 0;

                switch (len & 15)
                {
                    case 15:
                        k2 ^= ((ulong)tail[14]) << 48;
                        goto case 14;
                    case 14:
                        k2 ^= ((ulong)tail[13]) << 40;
                        goto case 13;
                    case 13:
                        k2 ^= ((ulong)tail[12]) << 32;
                        goto case 12;
                    case 12:
                        k2 ^= ((ulong)tail[11]) << 24;
                        goto case 11;
                    case 11:
                        k2 ^= ((ulong)tail[10]) << 16;
                        goto case 10;
                    case 10:
                        k2 ^= ((ulong)tail[9]) << 8;
                        goto case 9;
                    case 9:
                        k2 ^= ((ulong)tail[8]) << 0;
                        k2 *= c2; k2 = rotl64(k2, 33); k2 *= c1; h2 ^= k2;
                        goto case 8;
                    case 8:
                        k1 ^= ((ulong)tail[7]) << 56;
                        goto case 7;
                    case 7:
                        k1 ^= ((ulong)tail[6]) << 48;
                        goto case 6;
                    case 6:
                        k1 ^= ((ulong)tail[5]) << 40;
                        goto case 5;
                    case 5:
                        k1 ^= ((ulong)tail[4]) << 32;
                        goto case 4;
                    case 4:
                        k1 ^= ((ulong)tail[3]) << 24;
                        goto case 3;
                    case 3:
                        k1 ^= ((ulong)tail[2]) << 16;
                        goto case 2;
                    case 2:
                        k1 ^= ((ulong)tail[1]) << 8;
                        goto case 1;
                    case 1:
                        k1 ^= ((ulong)tail[0]) << 0;
                        k1 *= c1; k1 = rotl64(k1, 31); k1 *= c2; h1 ^= k1;
                        break;
                };
            }

            //----------
            // finalization

            h1 ^= (ulong)len; h2 ^= (ulong)len;

            h1 += h2;
            h2 += h1;

            h1 = fmix64(h1);
            h2 = fmix64(h2);

            h1 += h2;
            h2 += h1;

            msb = h2;
            return h1;
        }

        public static ulong MurmurHash3_x64_64(byte[] rawData, int offset, int len, uint seed = DEFAULT_SEED)
        {
            ulong result;
            MurmurHash3_x64_128(rawData, offset, len, seed, out result);
            return result;
        }
    }
}
